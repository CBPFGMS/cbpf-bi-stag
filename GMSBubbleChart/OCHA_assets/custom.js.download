$(document).ready(function () {

    InitNotifications();

    DeleteConfirmation();

    InitToolTip();

    stripTable();

    quickFilterTable();

    InitTogglers();

    InitGroupTogglers();

    Initcheckall();

    stripTable_1();

    stripTable_2();

    stripTable_7();

    advQuickFilterTable();

    if ($('#dvCARiskAlert') != undefined) {
        if ($('#dvCARiskAlert').children().length == 0) {
            if ($('#dvCSRiskScore') != undefined) {
                $('#dvCSRiskScore').hide();
            }
        }
    }

});

function TextBoxFilterValues_ProjectCode(elementRef) {
    var checkValue = new String(elementRef.value);
    var newValue = '';

    // 1<2,3>4&56789
    for (var i = 0; i < checkValue.length; i++) {
        var currentChar = checkValue.charAt(i);

        if ((currentChar != '<') && (currentChar != ',') && (currentChar != '>') && (currentChar != '&') && (currentChar != "'"))
            newValue += currentChar;
    }

    elementRef.value = newValue;
}




// check all checboxes
function Initcheckall() {
    //check groups checkboxes
    $('.check_groups').click(function () {
        if ($(this).attr('checked') == 'checked') {
            $('.group-select-details > div > input[type="checkbox"]').attr('checked', 'checked');
        } else {
            $('.group-select-details > div > input[type="checkbox"]').removeAttr('checked');
        }

    });

    // check table checkboxes
    $("th :checkbox").change(function () {
        $(this).closest("table").find(":checkbox").attr("checked", $(this).is(":checked"));
    });

    // if all checkbox are selected, check the selectall checkbox
    // and viceversa
    $("td :checkbox").click(function () {
        if ($(this).closest("table").find("td :checkbox").length == $(this).closest("table").find("td :checkbox:checked").length) {
            $(this).closest("table").find("th :checkbox").attr("checked", "checked");
        } else {
            $(this).closest("table").find("th :checkbox").removeAttr("checked");
        }
    });

}


//Grap Cursor 
function cursorToggle() {
    $(document).on('mousedown mouseup', '.grab, .grabbing', function (event) {
        $(this).toggleClass('grab').toggleClass('grabbing');
    });

}

//delete confirmation
function DeleteConfirmation() {
    //$('.delete,.remove-columns,.remove_row').live('click', function () {
      //  return confirm('Are you sure you want to delete this record?');
   // });
}


//tooltip and set autofill of in text boxes
function InitToolTip() {
    //    $(".tooltip").tipsy();
    $('input').attr('autocomplete', 'off');
}

//show twitter like Notifications
function InitNotifications() {

    $("#confirmation").slideDown('slow');
    setTimeout(function () { $("#confirmation").slideUp('slow') }, 2500);

}


// strip even rows
function stripTable() {
    $("table.stripped tr").css('border-bottom', '1px solid #d9dee2');
    $("table.stripped tr:odd").css('background', '#f0f0f6');
}

function stripTable_1() {
    $("table.stripped_1 tr").css('border-bottom', '1px solid #d9dee2');
    //$("table.stripped_1 tr:odd").css('background', '#f0f0f6');
}

function stripTable_2() {
    $("table.stripped_2 tr").css('border-bottom', '1px solid #d9dee2');
    $("table.stripped_2 tr:odd").css('background', '#f0f0f6');
}

function quickFilterTable() {
    $("table.quickFilter tr:odd").css('background', '#f0f0f6');
}
function advQuickFilterTable() {
    $("table.adv_quickFilter tr:odd").css('background', '#f0f0f6');
}

function stripTable_7() {
    $("table.stripped_7 tr:even").css('background', '#f0f0f6');
}

//toggle
function InitTogglers() {

    $(".group-details").slideUp();
    //$(".group-details:first").next().slideDown();	
    $('.group-header').click(function () {
        $this = $(this);
        if ($this.hasClass('group-on')) {
            $this.removeClass("group-on").next().slideUp(600);
        } else {
            $('.group-header').removeClass("group-on");
            $(this).addClass("group-on").next().slideDown(600);
        }

        return false;
    });

}

//toggle
function InitGroupTogglers() {

    $(".group-select-details").slideUp();
    //$(".group-details:first").next().slideDown();	
    $('.group-select > span').click(function () {
        $this = $(this);
        $this.parent().next().slideToggle(600);
        return false;
    });

}

// modal dialog
function InitShowDialog(url, title) {
    //var childWindow;
    window.showModalDialog(url, title, "dialogHeight: 500px; dialogWidth: 800px; edge: Sunken; center: Yes; help: No; resizable: No; status: No; dialogLeft: 100px; dialogTop: 100px; scroll: No");
}


function InitShowpreviewDialog(url, title) {
    //var childWindow;
    window.showModalDialog(url, title, "dialogHeight:800px; dialogWidth: 960px; edge: Sunken; center: Yes; help: No; resizable: No; status: No; scroll: No");
}

function InitShowcommentDialog(url, title) {
    //var childWindow;
    window.showModalDialog(url, title, "dialogHeight:500px; dialogWidth: 960px; edge: Sunken; center: Yes; help: No; resizable: No; status: No; scroll: Yes");
}

//format into currency format
function formatCurrency(num) {
    num = num.toString().replace(/\$|\,/g, '');
    if (isNaN(num))
        num = "0";
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10)
        cents = "0" + cents;
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
        num = num.substring(0, num.length - (4 * i + 3)) + ',' +
num.substring(num.length - (4 * i + 3));
    return (((sign) ? '' : '-') + num + '.' + cents);
}

//format into digits format
function formatdigits(num) {
    num = num.toString().replace(/\$|\,/g, '');
    if (isNaN(num))
        num = "0";
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10)
        cents = "0" + cents;
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
        num = num.substring(0, num.length - (4 * i + 3)) + ',' +
num.substring(num.length - (4 * i + 3));
    return (((sign) ? '' : '-') + num);
}

//prepares a value from a control for addition or subtraction
function validatenumerictoadd($myvalue) {
    if (!Number($myvalue)) {
        $mynewvalue = 0;
        return $mynewvalue;
    } else {
        $mynewvalue = $myvalue;
        return $myvalue;
    }

}
//validate an asp.net text box to make sure its numeric only
function validatenumeric(field) {
    if (document.getElementById(field).value == 0) {
        return true;
    } else {
        if (isNaN(document.getElementById(field).value)) {
            alert("Only numerals are allowed in this field");
            document.getElementById(field).value = 0;
            return false;
        } else {
            return true;
        }
    }
}

function validatenumericArrayText(field) {
    if (field.value == 0) {
        return true;
    } else {
        if (!Number(field.value)) {
            alert("Only numerals are allowed in this field");
            field.value = 0;
            return false;
            //field.focus();
        } else {
            return true;
        }
    }
}


//make sure a textbox has zero if the user leaves it null.
function defaultzero(field) {
    if (document.getElementById(field).value == "") {
        document.getElementById(field).value = "0";
        return true;
    } else {
        return true;
    }
}

//print just a section of a page that has an id e.g a div or table content
function printContent(id) {
    str = document.getElementById(id).innerHTML
    newwin = window.open('', 'printwin', 'left=100,top=100')
    newwin.document.write('<HTML>\n<HEAD>\n')
    newwin.document.write('<TITLE>Print Page</TITLE>\n')
    newwin.document.write('<script>\n')
    newwin.document.write('function chkstate(){\n')
    newwin.document.write('if(document.readyState=="complete"){\n')
    //newwin.document.write('window.close()\n')
    newwin.document.write('}\n')
    newwin.document.write('else{\n')
    newwin.document.write('setTimeout("chkstate()",2000)\n')
    newwin.document.write('}\n')
    newwin.document.write('}\n')
    newwin.document.write('function print_win(){\n')
    newwin.document.write('window.print();\n')
    newwin.document.write('chkstate();\n')
    newwin.document.write('}\n')
    newwin.document.write('<\/script>\n')
    newwin.document.write('</HEAD>\n')
    newwin.document.write('<BODY onload="print_win()">\n')
    newwin.document.write(str)
    newwin.document.write('</BODY>\n')
    newwin.document.write('</HTML>\n')
    //  newwin.document.close()/
}

function ShowFilterPopup() {
    if (!Page_ClientValidate()) {
        return false;
    }
    return true;
}

function CountChars(field, countfield, maxChars) {
    var enteredText = document.getElementById(field).value;
    var numberOfLineBreaks = (enteredText.match(/\n/g) || []).length;
    var characterCount = enteredText.length + numberOfLineBreaks;

    if (characterCount > maxChars) {
        alert("Sorry more than " + maxChars + " characters not allowed. You will not be able to save this record unless you make modifications required");
        document.getElementById(field).value = document.getElementById(field).value.substring(0, (maxChars - numberOfLineBreaks));

        var newenteredText = document.getElementById(field).value;
        var newNumberOfLineBreaks = (newenteredText.match(/\n/g) || []).length;
        var newCharacterCount = newenteredText.length + newNumberOfLineBreaks;
        document.getElementById(countfield).value = newCharacterCount + " / " + maxChars;
        return false;
    }
    document.getElementById(countfield).value = "Character count: " + characterCount + " / " + maxChars;
}

function CheckCharCount(field, countfield, maxChars) {

    var enteredText = document.getElementById(field).value;
    var numberOfLineBreaks = (enteredText.match(/\n/g) || []).length;
    var characterCount = enteredText.length + numberOfLineBreaks;

    if (characterCount > maxChars) {
        alert("Sorry more than " + maxChars + " characters not allowed. You will not be able to save this record unless you make modifications required");
        document.getElementById(field).value = document.getElementById(field).value.substring(0, (maxChars - numberOfLineBreaks));

        var newenteredText = document.getElementById(field).value;
        var newNumberOfLineBreaks = (newenteredText.match(/\n/g) || []).length;
        var newCharacterCount = newenteredText.length + newNumberOfLineBreaks;
        document.getElementById(countfield).value = newCharacterCount + " / " + maxChars;
        return false;
    }
    document.getElementById(countfield).value = characterCount + " / " + maxChars;
}

function CheckCharCountSpan(field, countfield, maxChars) {

    var enteredText = document.getElementById(field).value;
    var numberOfLineBreaks = (enteredText.match(/\n/g) || []).length;
    var characterCount = enteredText.length + numberOfLineBreaks;

    if (characterCount > maxChars) {
        alert("Sorry more than " + maxChars + " characters not allowed. You will not be able to save this record unless you make modifications required");
        document.getElementById(field).value = document.getElementById(field).value.substring(0, (maxChars - numberOfLineBreaks));

        var newenteredText = document.getElementById(field).value;
        var newNumberOfLineBreaks = (newenteredText.match(/\n/g) || []).length;
        var newCharacterCount = newenteredText.length + newNumberOfLineBreaks;
        document.getElementById(countfield).innerText = newCharacterCount + " / " + maxChars;
        return false;
    }
    document.getElementById(countfield).innerText = characterCount + " / " + maxChars;
}

function CheckHTMLtags(ev) {
    if (ev.value.indexOf("<") != -1 || ev.value.indexOf(">") != -1) {
        alert('HTML tags "<" and ">" are not allowed');
        ev.value = ev.value.substring(0, ev.value.length - 1);
        return false;
    }
}

function GetDateTime(stringDate) {
    if (stringDate == null)
        return "";
    var statusDate;

    if (stringDate.match("^\/Date")) {
        statusDate = new Date(parseInt(stringDate.substr(6)))
    }
    else {
        statusDate = new Date(stringDate);
    }

    var twoDigitMonth = GetTwoLengthDigits(statusDate.getMonth() + 1)
    var twoDigitDate = GetTwoLengthDigits(statusDate.getDate());
    var hour = statusDate.getHours()
    var am_pm = "AM";

    if (parseInt(hour) == 12) {
        am_pm = "PM";
    }
    else if (parseInt(hour) > 12) {
        hour = hour - 12;
        am_pm = "PM";
    }
    hour = GetTwoLengthDigits(hour)

    var minute = GetTwoLengthDigits(statusDate.getMinutes());
    var currentDate = twoDigitDate + "/" + twoDigitMonth + "/" + statusDate.getFullYear() + " " + hour + ":" + minute + " " + am_pm;
    return currentDate;
}

function GetDate(stringDate) {
    if (stringDate == null)
        return "";
    var statusDate;

    if (stringDate.match("^\/Date")) {
        statusDate = new Date(parseInt(stringDate.substr(6)));
    }
    else {
        statusDate = new Date(stringDate);
    }
    var twoDigitMonth = GetTwoLengthDigits(statusDate.getMonth() + 1)
    var twoDigitDate = GetTwoLengthDigits(statusDate.getDate());

    var currentDate = twoDigitDate + "/" + twoDigitMonth + "/" + statusDate.getFullYear();
    return currentDate;
}

function GetTwoLengthDigits(number) {
    number = number.toString();
    number = ((number.length) === 2) ? number : '0' + number;
    return number;
}

function GetCharCount(field, countfield, maxChars) {
    var enteredText = $("textarea[id*='" + field + "']").val();
    var numberOfLineBreaks = (enteredText.match(/\n/g) || []).length;
    var characterCount = enteredText.length + numberOfLineBreaks;

    if ($("textarea[id*='" + field + "']").is("[maxlength]") == false) {
        $("textarea[id*='" + field + "']").attr("maxlength", maxChars);
    }

    if (characterCount > maxChars) {
        alert("Sorry more than " + maxChars + " characters not allowed. You will not be able to save this record unless you make modifications required");
        var trimmedValue = $("textarea[id*='" + field + "']").val().substring(0, (maxChars - numberOfLineBreaks));
        $("textarea[id*='" + field + "']").val(trimmedValue);

        var newenteredText = $("textarea[id*='" + field + "']").val();
        var newNumberOfLineBreaks = (newenteredText.match(/\n/g) || []).length;
        var newCharacterCount = newenteredText.length + newNumberOfLineBreaks;

        $("span[id*='" + countfield + "']").text(newCharacterCount + " / " + maxChars)
        return false;
    }
    $("span[id*='" + countfield + "']").text(characterCount + " / " + maxChars)
}

function GetCharCountForDynamicCtrl(field, countfield, maxChars, parentControlId) {
    var enteredText = $("#" + parentControlId).find("textarea[id*='" + field + "']").val();
    var numberOfLineBreaks = (enteredText.match(/\n/g) || []).length;
    var characterCount = enteredText.length + numberOfLineBreaks;

    if ($("#" + parentControlId).find("textarea[id*='" + field + "']").is("[maxlength]") == false) {
        $("#" + parentControlId).find("textarea[id*='" + field + "']").attr("maxlength", maxChars);
    }

    if (characterCount > maxChars) {
        alert("Sorry more than " + maxChars + " characters not allowed. You will not be able to save this record unless you make modifications required");
        var trimmedValue = $("#" + parentControlId).find("textarea[id*='" + field + "']").val().substring(0, (maxChars - numberOfLineBreaks));
        $("#" + parentControlId).find("textarea[id*='" + field + "']").val(trimmedValue);

        var newenteredText = $("#" + parentControlId).find("textarea[id*='" + field + "']").val();
        var newNumberOfLineBreaks = (newenteredText.match(/\n/g) || []).length;
        var newCharacterCount = newenteredText.length + newNumberOfLineBreaks;

        $("#" + parentControlId).find("textarea[id*='" + field + "']").parent().find("span[id*='" + countfield + "']").text(newCharacterCount + " / " + maxChars)
        return false;
    }
    $("#" + parentControlId).find("textarea[id*='" + field + "']").parent().find("span[id*='" + countfield + "']").text(characterCount + " / " + maxChars)
}

//Validate date by jquery datepicker
function ValidateDate(dateValue) {
    if (dateValue == "")
        return true;

    try {
        $.datepicker.parseDate("dd/mm/yy", dateValue);

        //var dateYear = $.datepicker.parseDate("dd/mm/yy", dateValue).getFullYear();
        var parts = dateValue.split("/");
        var dateYear = parts[2];

        if (parseInt(dateYear) < 1900 || parseInt(dateYear) > 2100) {
            return false;
        }

        return true;
    }
    catch (error) {
        return false;
    }
}

function EncodeInputForAjax(text) {
    text = text.replace(/\\/g, "\\\\");
    text = text.replace(/\"/g, "\\\"")
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");
    text = text.replace(/\n/g, "<br/>");
    

    return text;
}

function EncodeInput(text) {
    text = text.replace(/\n/g, "<br/>");
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");

    return text;
}

function EncodeTextInput(text) {
    text = text.replace(/&/g, "&amp;");
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");
    return text;
}

function EncodeText() {
    $("textarea").each(function (i, e) {
        var value = $(this).val();
        $(this).val(EncodeTextInput(value));
    });

    $("input[type='text']").each(function (i, e) {
        var value = $(this).val();
        $(this).val(EncodeTextInput(value));
    });

    $("input[type='hidden']").each(function (i, e) {
        var value = $(this).val();
        $(this).val(EncodeTextInput(value));
    });
}

function DecodeTextInput(text) {
    text = text.replace(/&lt;/g, "<");
    text = text.replace(/&gt;/g, ">");
    text = text.replace(/&amp;/g, "&");
    return text;
}

function DecodeText() {
    $("textarea").each(function (i, e) {
        var value = $(this).val();
        $(this).val(DecodeTextInput(value));
    });

    $("input[type='text']").each(function (i, e) {
        var value = $(this).val();
        $(this).val(DecodeTextInput(value));
    });

    $("input[type='hidden']").each(function (i, e) {
        var value = $(this).val();
        $(this).val(DecodeTextInput(value));
    });
}



function ShowCharCount(countfield) {
    $("span[id*='" + countfield + "']").parent().show();
}

function HideCharCount(countfield) {
    $("span[id*='" + countfield + "']").parent().hide();
}

function ShowCharCountForDynamicCtrl(field, countfield, parentCtrlId) {
    $("#" + parentCtrlId).find("textarea[id*='" + field + "']").parent().find("span[id*='" + countfield + "']").parent().show();
}

function HideCharCountForDynamicCtrl(field, countfield, parentCtrlId) {
    $("#" + parentCtrlId).find("textarea[id*='" + field + "']").parent().find("span[id*='" + countfield + "']").parent().hide();
}

function DecodeInputForAjax(text) {
    if (text != undefined) {
        text = text.replace(/<br>/g, "\n");
        text = text.replace(/<br\/>/g, "\n");
        text = text.replace(/&lt;/g, "<");
        text = text.replace(/&gt;/g, ">");
        text = text.replace(/&amp;/g, "&");
    }
    else
    {
        text = '';
    }
    return text;
}

function ValidateNumberOnly(field) {
    var value = $(field).val();
    //Check for non-numeric values
    if (/\D/g.test(value)) {
        alert("Please enter only numbers");
        $(field).val("0");
    }
}

function ValidateNumberWithDecimals(field, maxDecimals) {
    var decimalRegExp = new RegExp("^[0-9]\\d*(\\.\\d{0," + maxDecimals + "})?$", "i");
    var value = $(field).val();

    if (!decimalRegExp.test(value)) {
        alert("Please enter numbers with maximum of " + maxDecimals + " decimals");
        $(field).val("0");
    }
}

function CheckMaxBeneficiaryValue(field, maxValue) {
    if ($(field).val() == "") {
        return;
    }

    var valueEntered = parseInt($(field).val());
    if (valueEntered > maxValue) {
        alert("The value cannot exceed " + number_format(maxValue, 0));
        $(field).val("0");
    }
}

function CheckMaxValue(field, maxValue) {
    if ($(field).val() == "") {
        return;
    }

    var valueEntered = parseInt($(field).val());
    if (valueEntered > maxValue) {
        alert("The value cannot exceed " + number_format(maxValue, 0));
        $(field).val("0");
    }
}

function ValidateURL(urlValue) {
    var isValid = new RegExp("(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|(www|[^\s]{2,}\.)[^\s]+\.[^\s]{2,})").test(urlValue)
    return isValid;
}

function HideContainerControl(controlId, controlType) {
    $(controlType + "[id*='" + controlId + "']").hide();
}

function HideValidatorIndicator(controlId) {
    $("span[id*='" + controlId + "']").hide();
}

function formatCurrency(num) {
    var p = num.toFixed(2).split(".");
    return p[0].split("").reverse().reduce(function (acc, num, i, orig) {
        return num + (i && !(i % 3) ? "," : "") + acc;
    }, "") + "." + p[1];
}


function extractNumber(obj, decimalPlaces, allowNegative) {
    var temp = obj.value;

    // avoid changing things if already formatted correctly
    var reg0Str = '[0-9]*';
    if (decimalPlaces > 0) {
        reg0Str += '\\.?[0-9]{0,' + decimalPlaces + '}';
    } else if (decimalPlaces < 0) {
        reg0Str += '\\.?[0-9]*';
    }
    reg0Str = allowNegative ? '^-?' + reg0Str : '^' + reg0Str;
    reg0Str = reg0Str + '$';
    var reg0 = new RegExp(reg0Str);
    if (reg0.test(temp)) return true;

    // first replace all non numbers
    var reg1Str = '[^0-9' + (decimalPlaces != 0 ? '.' : '') + (allowNegative ? '-' : '') + ']';
    var reg1 = new RegExp(reg1Str, 'g');
    temp = temp.replace(reg1, '');

    if (allowNegative) {
        // replace extra negative
        var hasNegative = temp.length > 0 && temp.charAt(0) == '-';
        var reg2 = /-/g;
        temp = temp.replace(reg2, '');
        if (hasNegative) temp = '-' + temp;
    }

    if (decimalPlaces != 0) {
        var reg3 = /\./g;
        var reg3Array = reg3.exec(temp);
        if (reg3Array != null) {
            // keep only first occurrence of .
            //  and the number of places specified by decimalPlaces or the entire string if decimalPlaces < 0
            var reg3Right = temp.substring(reg3Array.index + reg3Array[0].length);
            reg3Right = reg3Right.replace(reg3, '');
            reg3Right = decimalPlaces > 0 ? reg3Right.substring(0, decimalPlaces) : reg3Right;
            temp = temp.substring(0, reg3Array.index) + '.' + reg3Right;
        }
    }

    obj.value = temp;
}

function blockNonNumbers(obj, e, allowDecimal, allowNegative) {
    var key;
    var isCtrl = false;
    var keychar;
    var reg;


    if (window.event) {
        key = e.keyCode;
        isCtrl = window.event.ctrlKey
    }
    else if (e.which) {
        key = e.which;
        isCtrl = e.ctrlKey;
    }

    if (isNaN(key)) return true;

    keychar = String.fromCharCode(key);

    // check for backspace or delete, or if Ctrl was pressed
    if (key == 8 || isCtrl) {
        return true;
    }

    reg = /\d/;
    var isFirstN = allowNegative ? keychar == '-' && obj.value.indexOf('-') == -1 : false;
    var isFirstD = allowDecimal ? keychar == '.' && obj.value.indexOf('.') == -1 : false;

    return isFirstN || isFirstD || reg.test(keychar);
}

function CheckMaxLength(textbox, maxLength) {

    if ($(textbox).val().length > maxLength) {
        alert('Please enter max ' + maxLength + ' characters.');
        $(textbox).val($(textbox).val().substring(0, maxLength));
        return false;
    }
    else
        return true;
}

function convertToNumber(value) {
    value = value.replace(/,/g, "");
    value = parseFloat(value);
    return value;
}


function EncodeTextInputComments(text) {   
    text = text.replace(/&/g, "&amp;");
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");
    text = text.replace(/\n/g, "\\n");   
    return text;
}

function EncodeTextComments() {

    $("textarea").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(EncodeTextInputComments(value));
        });

    });

    $("input[type='text']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(EncodeTextInputComments(value));
        });

    });

    $("input[type='hidden']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(EncodeTextInputComments(value));
        });

    });

    $("div[id*='dvFloatingComment']").find("textarea").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(EncodeTextInputComments(value));
        });

    });

    $("div[id*='dvFloatingComment']").find("input[type = 'text']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(EncodeTextInputComments(value));
        });

    });

    $("div[id*='dvFloatingComment']").find("input[type='hidden']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(EncodeTextInputComments(value));
        });

    });
    

}

function DecodeTextInputComments(text) {
    text = text.replace(/&lt;/g, "<");
    text = text.replace(/&gt;/g, ">");
    text = text.replace(/&amp;/g, "&");
    text = text.replace(/\\n/g, "\n");
    return text;
}

function DecodeTextComments() {

    $("textarea").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(DecodeTextInputComments(value));
        });

    });

    $("input[type='text']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(DecodeTextInputComments(value));
        });

    });

    $("input[type='hidden']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(DecodeTextInputComments(value));
        });

    });

    $("div[id*='dvFloatingComment']").find("textarea").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(DecodeTextInputComments(value));
        });

    });

    $("div[id*='dvFloatingComment']").find("input[type='text']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(DecodeTextInputComments(value));
        });

    });

    $("div[id*='dvFloatingComment']").find("input[type='hidden']").each(function (index, element) {

        $(element).each(function (i, e) {
            var value = $(this).val();
            $(this).val(DecodeTextInputComments(value));
        });

    });
   
}

function ReplaceScriptTags(text) {
    //text = text.replace("<script>", "", "g").replace("<\/script>", "", "g")   
    var rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
    text = text.replace(rscript, "");  
    return text;
}

function EncodeInputForFloatingComments(text) {
    text = text.replace(/&/g, "&amp;");
    text = text.replace(/\"/g, "\\\"")
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");
    text = text.replace(/\n/g, "\\\\n");

    return text;
}

function TruncateValue(num) {
    num = String(num);
    if (num.indexOf('.') !== -1) {
        var numarr = num.split(".");
        if (numarr.length == 1) {
            return Number(num);
        }
        else {
            return Number(numarr[0] + "." + numarr[1].charAt(0) + numarr[1].charAt(1));
        }
    }
    else {
        return Number(num);
    }
}

function CheckPositiveValue(field) {
    if ($(field).val() < 0) {
        alert('Only positive number allowed');
        $(field).val('');
    }
    else {
        return;
    }
}

function HideControlById(controlId)
{
    $(document).ready(function () {
        $("#" + controlId).hide();
    });
}

function ExportToExcel(chfId, instanceId, typeId) {
    window.open('../chf/GenerateReport.aspx?CHFId=' + chfId + '&InstanceId=' + instanceId + '&TypeId=' + typeId, 'newwindow', 'toolbar=no,location=no,menubar=no,width=450,height=200,resizable=no,scrollbars=no,top=200,left=250');
    return false;
}

function GenerateAuthCode(pooledFundId) {
    var outputRequest = '';

    if (pooledFundId != undefined && pooledFundId != 0) {
       
       var requestURL = "../chf/AjaxPage.aspx/GetAuthCode";

        var data = '{"pooledFundId":"' + pooledFundId + '"}';
            $.ajax({
                type: "POST",
                url: requestURL,
                async: false,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: data,
                success: function (data) {
                    outputRequest = data.d;
                }
            });
        }
    return outputRequest;
}

(function ($) {
    $.fn.blink = function (options) {
        var defaults = { delay: 500 };
        var options = $.extend(defaults, options);
        return $(this).each(function (idx, itm) {
            setInterval(function () {
                if ($(itm).css("visibility") === "visible") {
                    $(itm).css('visibility', 'hidden');
                }
                else {
                    $(itm).css('visibility', 'visible');
                }
            }, options.delay);
        });
    }
}(jQuery))